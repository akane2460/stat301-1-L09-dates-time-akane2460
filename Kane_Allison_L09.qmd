---
title: "L09 Dates & Time"
subtitle: "Data Science 1 with R (STAT 301-1)"
author: "Allison Kane"
date: today

format:
  html:
    toc: true
    embed-resources: true
    code-fold: show
    link-external-newwindow: true

execute:
  warning: false
  
from: markdown+emoji 
---

::: {.callout-tip icon=false}

## Github Repo Link

[Allison Repo Link](https://github.com/stat301-1-2023-fall/L09-dates-time-akane2460.git)

:::

## Load packages

```{r}
#| label: load-pkgs
#| code-fold: false

# Loading package(s)
library(tidyverse)
library(lubridate)
library(skimr)
library(nycflights13)

```


## Datasets 

```{r}
#| label: datasets
# load in data
tinder_data <- read_csv("data/tinder_data.csv")

data("flights")

# data adjustments 

# build make datetime function
make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

# change dep_time, arr_time, sched_dep_time and sched_arr_time to datetimes
flights_dt <- flights |> 
  # remove cancelled flights
  filter(!is.na(dep_time), !is.na(arr_time)) |> 
  # change to datetimes
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) 

```


## Exercises

### Exercise 1 

At the top of the document in the yaml header, define the `date` to be the current date using `today`.

::: {.callout-tip icon="false"}
## Solution

See top of document.

:::

### Exercise 2

What happens if you try to parse a string that contains invalid dates, like this one?

```{r}
#| label: ex-01
#| code-fold: false
#| eval: false

# invalid string example
ymd(c("2010-10-10", "bananas"))
```

::: {.callout-tip icon="false"}
## Solution

Since bananas is not a valid date tring, this will return an error.

:::

### Exercise 3

Use the appropriate `lubridate` function to parse each of the following dates:

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex-03
#| code-fold: false

# dates to parse
d1 <- "January 1, 2010"
mdy(d1)

d2 <- "2015-Mar-07"
ymd(d2)

d3 <- "06-Jun-2017"
dmy(d3)

d4 <- c("August 19 (2015)", "July 1 (2015)")
mdy(d4)

d5 <- "12/30/14" # Dec 30, 2014
mdy(d5)

```
:::


### Exercise 4

Compare `dep_time`, `sched_dep_time` and `dep_delay`. Are they consistent? Explain your findings.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 04

check_delay_calc <- flights_dt |> 
  mutate(
    computed_delay = dep_time - sched_dep_time,
    dep_delay = dminutes(dep_delay),
    consistent = if_else(computed_delay == dep_delay, TRUE, FALSE),
    .keep = "used"
  )

# handling the late night flights
check_delay_calc <- check_delay_calc |> 
  filter(consistent == FALSE) |> 
  mutate(
    adj_dep_time = dep_time + ddays(1),
    computed_delay = as.duration(adj_dep_time - sched_dep_time),
    dep_delay = dep_delay,
    consistent = if_else(computed_delay == dep_delay, TRUE, FALSE)
  )

check_delay_calc |> 
  count(consistent) |> 
  mutate(prop = n / sum(n))


```

Yes, they are consistent. However, with late night flights, adjustments for a date change is important to keep track of, as the data seems to have a few errors with that.
:::


### Exercise 5

How does the average delay time change over the course of a day? Should you use `dep_time` or `sched_dep_time` to assess this? Explain your choice.

::: {.callout-tip icon="false"}
## Solution

`dep_time` should be used, as it more accurately reflects the time at which the plane actually leaves

```{r}
#| label: ex 05

dep_delay_by_hour <- flights_dt |> 
  filter(dep_delay > 0) |> 
  summarize(
    avg_dep_delay = mean(dep_delay),
    med_dep_delay = median(dep_delay),
    cv = sd(dep_delay) / mean(dep_delay),
    num_flights = n(),
    .by = hour
  )

ggplot(dep_delay_by_hour, aes(hour, avg_dep_delay)) +
  geom_line() 
  
ggplot(dep_delay_by_hour, aes(hour, cv)) +
  geom_line() 
```

The delays become longer later in the day, with less variation in delay time. Earlier in the day, delay times are shorter (and occur less frequently) and they tend to vary a bit more.

:::


### Exercise 6

On what day of the week should you leave if you want to minimize the chance of a delay?

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 06

flights_dt |> 
  mutate(
    day_of_week = wday(sched_dep_time, label = TRUE, abbr = FALSE),
    .before = 1
  ) |> 
  summarize(
    avg_dep_delay = mean(dep_delay),
    med_dep_delay = median(dep_delay),
    .by = day_of_week
  ) |> 
  arrange(avg_dep_delay)

```

Saturday is the ideal day to travel to minimize risk of delay.

:::


### Exercise 7

Create a tibble with 3 variables containing the following:

1. every month in a year (i.e., `"January"`),
2. the date of the first day of every month (i.e., `"2022-01-01"`), and 
3. the day of the week that each first day falls on (i.e., `"Tuesday"`). 

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 07

# Create a tibble with 3 variables containing the following:
  
# 1. every month in a year (i.e., `"January"`),

# 2. the date of the first day of every month (i.e., `"2022-01-01"`), and 
first_days <- seq(ymd("2022-01-01"), by = "1 month", length.out = 12)

# 3. the day of the week that each first day falls on (i.e., `"Tuesday"`). 
weekdays <- weekdays(first_days)

# tibble
tibble(
  month = c("January", "February", "March", "April", "May", "June", "July",
            "August", "September", "October", "November", "December"),
  first = first_days,
  day_of_week = weekdays
  )

```


:::

## Case Study

Use the `tinder_data` file in the `data/` subdirectory to complete the following tasks.^[This dataset was sourced from [Swipestats.io](https://www.swipestats.io/).] 

1. Describe the distribution of `age_current` on Tinder (calculated from the current date to their birth date). We typically express age in years, round down to the nearest whole number.
2. Describe the distribution of `age_joined` on Tinder (calculated from `user_create_date` and `user_birth_date`). We typically express age in years, round down to the nearest whole number.
3. Which distribution do you believe is a more accurate representation of user age and why?

::: {.callout-tip icon="false"}
## Solution

```{r}
tinder_data <- tinder_data |> 
  mutate(
    age_current = floor((user_birth_date %--% today()) / years(1)),
    age_joined = floor((user_birth_date %--% user_create_date) / years(1)),
    .keep = "used"
  )
skim_without_charts(tinder_data$age_current)

ggplot(tinder_data, aes(x = age_current)) +
  geom_histogram() +
  labs(x = "Age (current)")

ggplot(tinder_data, aes(x = age_current)) +
  geom_boxplot() +
  labs(x = "Age (current)")


skim_without_charts(tinder_data$age_joined)

ggplot(tinder_data, aes(x = age_joined)) +
  geom_histogram() +
  labs(x = "Age (joined)")

ggplot(tinder_data, aes(x = age_joined)) +
  geom_boxplot() +
  labs(x = "Age (joined)")

```


The distribution of `age_current` on Tinder is skewed right, with a median age of 27 years. Most Tinder users have a current age ranging from 25 to 31. There are some extreme values that might indicate some mistakes in the dataset, as some user have current ages listed as 2 years old and 141 years old, both of which seem far too extreme to accurately represent the current age of a Tinder User. 

The distribution of `age_joined` on Tinder is also skewed right, with a median joining age of 23 years old. Most Tinder users joined from ages 20 to 27. There are also some extreme values that, again, might indicate mistakes in the dataset, with a user claiming to have joined Tinder at 0 years old and another at 137. Both these values seem far too extreme.


The distribution of `age_current` seems to be a more accurate representation of user age, as it describes the user's age  relative to their date of birth and the current date, rather than their date of birth and the date they created their Tinder account. 

:::
